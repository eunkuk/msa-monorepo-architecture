# ===================================================================
# [개발/테스트용 Kafka 2노드 클러스터 + Zookeeper + 관리 UI 도커 컴포즈]
#
# 이 파일을 사용하면, 복잡한 설치 과정 없이
#  - 카프카(Kafka) 브로커 2개
#  - Zookeeper 1개
#  - 웹 기반 관리 UI 2개(Kafdrop, Kafka UI)
# 를 한 번에 띄울 수 있습니다!
#
# 각 브로커는 내부 컨테이너 통신용(INTERNAL)과
# 외부 접근용(EXTERNAL) 리스너를 분리해 설정합니다.
# Spring 등 외부 앱은 localhost 포트로 접근 가능하며,
# Kafka 브로커 간 통신은 INTERNAL 네트워크 상 이름(kafka1, kafka2)으로 진행됩니다.
# ===================================================================
version: '3.8'

services:
  # -----------------------------------------
  # Zookeeper: 카프카 브로커의 상태/정보를 관리해주는 역할
  # -----------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - ./volumes/zookeeper/data:/var/lib/zookeeper/data
      - ./volumes/zookeeper/logs:/var/lib/zookeeper/log
    networks:
      - kafka-network

  # -----------------------------------------
  # Kafka 브로커 1번
  # -----------------------------------------
  kafka1:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_CREATE_TOPICS: "socket-message-topic:2:2"
      KAFKA_LOG_DIRS: /kafka/kafka-logs
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    volumes:
      - ./volumes/kafka1/data:/kafka/kafka-logs
    networks:
      - kafka-network
    restart: unless-stopped

  # -----------------------------------------
  # Kafka 브로커 2번
  # -----------------------------------------
  kafka2:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://localhost:19093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_LOG_DIRS: /kafka/kafka-logs
    ports:
      - "19093:19093"
    depends_on:
      - zookeeper
    volumes:
      - ./volumes/kafka2/data:/kafka/kafka-logs
    networks:
      - kafka-network
    restart: unless-stopped

  # -----------------------------------------
  # Kafdrop: Kafka 메시지 브라우저 UI (메시지/토픽/파티션 등 확인 가능)
  # http://localhost:9000 에서 접속
  # -----------------------------------------
  kafdrop:
    image: obsidiandynamics/kafdrop:3.31.0
    container_name: kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka1:9092,kafka2:9092
      JVM_OPTS: "-Xms64M -Xmx128M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    depends_on:
      - kafka1
      - kafka2
    networks:
      - kafka-network

  # -----------------------------------------
  # Kafka UI: 최신형 Kafka 관리 웹 UI (토픽/컨슈머/메시지 등)
  # http://localhost:8080 에서 접속
  # -----------------------------------------
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.1
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - kafka1
      - kafka2
    networks:
      - kafka-network

# -----------------------------------------
# 네트워크: Kafka 관련 서비스들이 모두 붙을 브릿지 네트워크
# -----------------------------------------
networks:
  kafka-network:
    driver: bridge
